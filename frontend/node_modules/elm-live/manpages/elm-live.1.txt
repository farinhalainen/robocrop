ELM-LIVE(1)                                                        ELM-LIVE(1)

NNAAMMEE
       eellmm--lliivvee - A flexible dev server for Elm. Live reload included!

SSYYNNOOPPSSIISS
       elm-live [...<options>] [--] ...<elm-make args>
       elm-live --help

DDEESSCCRRIIPPTTIIOONN
       First, we spawn eellmm--mmaakkee with the eellmm--mmaakkee aarrggss you^ave given.

       When  the  build is ready, we start a static HTTP server in the current
       directory. We inject a _l_i_v_e _r_e_l_o_a_d snippet  into  every  HTML  file  we
       serve.  Every  time a static file has changed, we^all reload your app in
       all browsers you^ave opened it with. (Mobile and IE included!)

       We also watch all **..eellmm files in the current directory and  its  subdi-
       rectories.  Whenever  you  change,  add  or  remove  one of them, we^all
       rebuild your program and reload the page.

OOPPTTIIOONNSS
   ----ppoorrtt==PPOORRTT
       Set the port to start the server at. If the port is  taken,  we^all  use
       the  next  available  one. PPOORRTT should be a valid port number. Default:
       88000000.

   ----ppaatthh--ttoo--eellmm--mmaakkee==PPAATTHH
       An absolute or relative path to eellmm--mmaakkee. If you^ave installed _e_l_m_-_p_l_a_t_-
       _f_o_r_m  locally with _n_p_m (nnppmm iinnssttaallll ----ssaavvee--ddeevv eellmm), you^all likely want
       to set this to nnooddee__mmoodduulleess//..bbiinn//eellmm--mmaakkee. Default: eellmm--mmaakkee.

   ----hhoosstt==HHOOSSTTNNAAMMEE||IIPP
       Set the host interface to attach the server to. Default: llooccaallhhoosstt.

   ----ddiirr==PPAATTHH
       The base for static content. Default: ...

   ----ooppeenn
       We^all open the app in your default browser as soon as the server is up.

   ----nnoo--rreeccoovveerr
       When  _e_l_m_-_m_a_k_e encounters a compile error, we keep _e_l_m_-_l_i_v_e running and
       give you time to fix your code.  Pass  ----nnoo--rreeccoovveerr  if  you  want  the
       server to exit immediately whenever it encounters a compile error.

   ----ppuusshhssttaattee
       Serve iinnddeexx..hhttmmll on 404 errors. This lets us use client-side routing in
       Elm. For instance, we can have a URL like hhttttpp::////llooccaallhhoosstt::88000000//aaccccoouunntt
       get handled by the Elm _n_a_v_i_g_a_t_i_o_n package instead of failing with a 404
       error.

   ----bbeeffoorree--bbuuiilldd==EEXXEECCUUTTAABBLLEE
       Run EEXXEECCUUTTAABBLLEE before every rebuild. This way you can easily use  other
       tools like _e_l_m_-_c_s_s or _b_r_o_w_s_e_r_i_f_y in your workflow.

       Heads  up!  At  the  moment,  we only allow running a single executable
       without parameters. If you need more than that, please give us a  shout
       at https://git.io/elm-live.before-build-args.

   ----aafftteerr--bbuuiilldd==EEXXEECCUUTTAABBLLEE
       Just like ----bbeeffoorree--bbuuiilldd, but runs after eellmm--mmaakkee.

   ----hheellpp
       You^are looking at it.

EEXXAAMMPPLLEESS
       The simplest scenario:

         $ elm-live Main.elm --open

       Custom HTML file:

         $ cat <<^a^a^a > index.html
           <!doctype html>
           <link rel="stylesheet" href="style.css" />

           <body>
             <div></div>
             <script src="elm.js"></script>
             <script>Elm.Main.embed(document.querySelector("div"));</script>
           </body>
         ^a^a^a
         $ elm-live Main.elm --output=elm.js --open

       Support client-side routing in Elm:

         $ elm-live Main.elm --open --pushstate

TTRROOUUBBLLEESSHHOOOOTTIINNGG
   mmyy aapppp iiss nnoott ggeettttiinngg rreellooaaddeedd
       Your  HTML file must have an explicit <<bbooddyy>> tag, so that we know where
       to inject a LiveReload snippet.

   II^^aamm sseeeeiinngg aa SSyynnttaaxxEErrrroorr aabboouutt bblloocckk--ssccooppeedd ddeeccllaarraattiioonnss
       If you^are seeing one of these:

         SyntaxError: Block-scoped declarations (let, const, function, class) not yet supported outside strict mode

       make sure you^are running on node 6+. If  you  can^at  upgrade,  consider
       transpiling      _h_t_t_p_s_:_/_/_g_i_t_h_u_b_._c_o_m_/_t_o_m_e_k_w_i_/_e_l_m_-_l_i_v_e_/_i_s_s_u_e_s_/_2_#_i_s_s_u_e_c_o_m_-
       _m_e_n_t_-_1_5_6_6_9_8_7_3_2 ssoouurrccee//eellmm--lliivvee..jjss to ES5.

       By the way, yarn _h_t_t_p_s_:_/_/_g_i_t_h_u_b_._c_o_m_/_y_a_r_n_p_k_g_/_y_a_r_n should be warning  you
       about  installing  incompatible  packages.  To get the same behavior in
       npm,    set    the    eennggiinnee--ssttrriicctt    _h_t_t_p_s_:_/_/_d_o_c_s_._n_p_m_j_s_._c_o_m_/_m_i_s_c_/_c_o_n_-
       _f_i_g_#_e_n_g_i_n_e_-_s_t_r_i_c_t flag.

CCRREEDDIITTSS
       Many thanks to Evan Czaplicki _h_t_t_p_s_:_/_/_g_i_t_h_u_b_._c_o_m_/_e_v_a_n_c_z, the creator of
       Elm, for git.io/elm-make _h_t_t_p_s_:_/_/_g_i_t_._i_o_/_e_l_m_-_m_a_k_e ^a the  most  brilliant
       language  compiler  the world has ever seen! Without _e_l_m_-_m_a_k_e, _e_l_m_-_l_i_v_e
       would be a car without an engine.

       Many thanks to Matt  DesLauriers  _h_t_t_p_s_:_/_/_g_i_t_h_u_b_._c_o_m_/_m_a_t_t_d_e_s_l  for  the
       wonderful  git.io/budo-server  _h_t_t_p_s_:_/_/_g_i_t_._i_o_/_b_u_d_o_-_s_e_r_v_e_r.  That^as what
       does the heavy lifting on the static server side.

       Warm  thanks  to   our   amazing   contributors!   Credits   to   Brian
       _h_t_t_p_s_:_/_/_g_i_t_h_u_b_._c_o_m_/_b_d_u_k_e_s  for  making  Windows  support possible, Kurt
       _h_t_t_p_s_:_/_/_g_i_t_h_u_b_._c_o_m_/_k_b_s_y_m_a_n_z for allowing a configurable ----hhoosstt and Josh
       _h_t_t_p_s_:_/_/_g_i_t_h_u_b_._c_o_m_/_j_o_s_h_m_h  for his work on enabling client-side naviga-
       tion. Thanks to Ryan _h_t_t_p_s_:_/_/_g_i_t_h_u_b_._c_o_m_/_R_y_a_n_1_7_2_9 batch updates are nice
       and   fast.   Kudos  to  Mathieu  _h_t_t_p_s_:_/_/_g_i_t_h_u_b_._c_o_m_/_m_a_g_o_p_i_a_n,  R~A(C)my
       _h_t_t_p_s_:_/_/_g_i_t_h_u_b_._c_o_m_/_n_a_t_i_m and Nicolas _h_t_t_p_s_:_/_/_g_i_t_h_u_b_._c_o_m_/_n_1_k_0 for making
       the     developer     experience     smoother     and     to    Gabriel
       _h_t_t_p_s_:_/_/_g_i_t_h_u_b_._c_o_m_/_p_e_a_c_e_m_e_m_o_r_i_e_s for the  ----bbeeffoorree--bbuuiilldd  option.  Many
       thanks to Noah _h_t_t_p_s_:_/_/_g_i_t_h_u_b_._c_o_m_/_e_e_u_e_5_6 for making sure elm-live works
       smoothly with elm-test _h_t_t_p_s_:_/_/_g_i_t_h_u_b_._c_o_m_/_e_l_m_-_c_o_m_m_u_n_i_t_y_/_e_l_m_-_t_e_s_t.

LLIICCEENNSSEE
       MIT    _h_t_t_p_s_:_/_/_g_i_t_._i_o_/_e_l_m_-_l_i_v_e_._L_i_c_e_n_s_e    ^A(C)    Tomek     Wiszniewski
       _h_t_t_p_s_:_/_/_g_i_t_h_u_b_._c_o_m_/_t_o_m_e_k_w_i

v2.7.5                             July 2017                       ELM-LIVE(1)
