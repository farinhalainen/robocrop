.TH "ELM\-LIVE" "1" "July 2017" "v2.7.5" ""
.SH "NAME"
\fBelm-live\fR \- A flexible dev server for Elm\. Live reload included!
.P
\~
.P
\~
.SH SYNOPSIS
.P
elm\-live [\|\.\.\.<options>] [\-\-] \.\.\.<elm\-make args>
.br
elm\-live \-\-help
.P
\~
.SH DESCRIPTION
.P
First, we spawn \fBelm\-make\fP with the \fBelm\-make args\fP you’ve given\.
.P
When the build is ready, we start a static HTTP server in the current directory\. We inject a \fIlive reload\fR snippet into every HTML file we serve\. Every time a static file has changed, we’ll reload your app in all browsers you’ve opened it with\. (Mobile and IE included!)
.P
We also watch all \fB*\.elm\fP files in the current directory and its subdirectories\. Whenever you change, add or remove one of them, we’ll rebuild your program and reload the page\.
.P
\~
.SH OPTIONS
.SS \fB\-\-port=PORT\fP
.P
Set the port to start the server at\. If the port is taken, we’ll use the next available one\. \fBPORT\fP should be a valid port number\. Default: \fB8000\fP\|\.
.SS \fB\-\-path\-to\-elm\-make=PATH\fP
.P
An absolute or relative path to \fBelm\-make\fP\|\. If you’ve installed \fIelm\-platform\fR locally with \fInpm\fR (\fBnpm install \-\-save\-dev elm\fP), you’ll likely want to set this to \fBnode_modules/\.bin/elm\-make\fP\|\. Default: \fBelm\-make\fP\|\.
.SS \fB\-\-host=HOSTNAME|IP\fP
.P
Set the host interface to attach the server to\. Default: \fBlocalhost\fP\|\.
.SS \fB\-\-dir=PATH\fP
.P
The base for static content\. Default: \fB\|\.\fP\|\.
.SS \fB\-\-open\fP
.P
We’ll open the app in your default browser as soon as the server is up\.
.SS \fB\-\-no\-recover\fP
.P
When \fIelm\-make\fR encounters a compile error, we keep \fIelm\-live\fR running and give you time to fix your code\. Pass \fB\-\-no\-recover\fP if you want the server to exit immediately whenever it encounters a compile error\.
.SS \fB\-\-pushstate\fP
.P
Serve \fBindex\.html\fP on 404 errors\. This lets us use client\-side routing in Elm\. For instance, we can have a URL like \fBhttp://localhost:8000/account\fP get handled by the Elm \fInavigation\fR package instead of failing with a 404 error\.
.SS \fB\-\-before\-build=EXECUTABLE\fP
.P
Run \fBEXECUTABLE\fP before every rebuild\. This way you can easily use other tools like \fIelm\-css\fR or \fIbrowserify\fR in your workflow\.
.P
Heads up! At the moment, we only allow running a single executable without parameters\. If you need more than that, please give us a shout at https://git\.io/elm\-live\.before\-build\-args\|\.
.SS \fB\-\-after\-build=EXECUTABLE\fP
.P
Just like \fB\-\-before\-build\fP, but runs after \fBelm\-make\fP\|\.
.SS \fB\-\-help\fP
.P
You’re looking at it\.
.P
\~
.SH EXAMPLES
.P
The simplest scenario:
.P
.RS 2
.nf
$ elm\-live Main\.elm \-\-open
.fi
.RE
.P
Custom HTML file:
.P
.RS 2
.nf
$ cat <<——— > index\.html
  <!doctype html>
  <link rel="stylesheet" href="style\.css" />

  <body>
    <div></div>
    <script src="elm\.js"></script>
    <script>Elm\.Main\.embed(document\.querySelector("div"));</script>
  </body>
———
$ elm\-live Main\.elm \-\-output=elm\.js \-\-open
.fi
.RE
.P
Support client\-side routing in Elm:
.P
.RS 2
.nf
$ elm\-live Main\.elm \-\-open \-\-pushstate
.fi
.RE
.P
\~
.SH TROUBLESHOOTING
.SS my app is not getting reloaded
.P
Your HTML file must have an explicit \fB<body>\fP tag, so that we know where to inject a LiveReload snippet\.
.SS I’m seeing a SyntaxError about block\-scoped declarations
.P
If you’re seeing one of these:
.P
.RS 2
.nf
SyntaxError: Block\-scoped declarations (let, const, function, class) not yet supported outside strict mode
.fi
.RE
.P
make sure you’re running on node 6+\. If you can’t upgrade, consider transpiling \fIhttps://github\.com/tomekwi/elm\-live/issues/2#issuecomment\-156698732\fR \fBsource/elm\-live\.js\fP to ES5\.
.P
By the way, yarn \fIhttps://github\.com/yarnpkg/yarn\fR should be warning you about installing incompatible packages\. To get the same behavior in npm, set the \fBengine\-strict\fP \fIhttps://docs\.npmjs\.com/misc/config#engine\-strict\fR flag\.
.P
\~
.SH CREDITS
.P
Many thanks to Evan Czaplicki \fIhttps://github\.com/evancz\fR, the creator of Elm, for git\.io/elm\-make \fIhttps://git\.io/elm\-make\fR – the most brilliant language compiler the world has ever seen! Without \fIelm\-make\fR, \fIelm\-live\fR would be a car without an engine\.
.P
Many thanks to Matt DesLauriers \fIhttps://github\.com/mattdesl\fR for the wonderful git\.io/budo\-server \fIhttps://git\.io/budo\-server\fR\|\. That’s what does the heavy lifting on the static server side\.
.P
Warm thanks to our amazing contributors! Credits to Brian \fIhttps://github\.com/bdukes\fR for making Windows support possible, Kurt \fIhttps://github\.com/kbsymanz\fR for allowing a configurable \fB\-\-host\fP and Josh \fIhttps://github\.com/joshmh\fR for his work on enabling client\-side navigation\. Thanks to Ryan \fIhttps://github\.com/Ryan1729\fR batch updates are nice and fast\. Kudos to Mathieu \fIhttps://github\.com/magopian\fR, Rémy \fIhttps://github\.com/natim\fR and Nicolas \fIhttps://github\.com/n1k0\fR for making the developer experience smoother and to Gabriel \fIhttps://github\.com/peacememories\fR for the \fB\-\-before\-build\fP option\. Many thanks to Noah \fIhttps://github\.com/eeue56\fR for making sure elm\-live works smoothly with elm\-test \fIhttps://github\.com/elm\-community/elm\-test\fR\|\.
.P
\~
.SH LICENSE
.P
MIT \fIhttps://git\.io/elm\-live\.License\fR © Tomek Wiszniewski \fIhttps://github\.com/tomekwi\fR

